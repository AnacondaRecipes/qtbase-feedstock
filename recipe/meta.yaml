{% set name = "qtbase" %}
{% set version = "6.9.1" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  - url: https://download.qt.io/official_releases/qt/{{ version.rpartition('.')[0] }}/{{ version }}/submodules/{{ name }}-everywhere-src-{{ version }}.tar.xz
    sha256: 40caedbf83cc9a1959610830563565889878bc95f115868bbf545d1914acf28e
    folder: {{ name }}
    patches:
      - patches/0001-Disable-unity-build-for-permission-plugins-in-macos.patch  # [osx]
      # https://doc.qt.io/qt-6/macos.html
      - patches/0002-set-xcode-version.patch  # [osx]
      - patches/0003-force-qmake-to-use-sdkroot-on-osx.patch  # [osx]

  - url: https://download.qt.io/development_releases/prebuilt/llvmpipe/windows/opengl32sw-64-mesa_12_0_rc2.7z  # [win]
    sha256: 2a0d2f92c60e0962ef5f6039d3793424c6f39e49ba27ac04a5b21ca4ae012e15                                   # [win]
    folder: opengl32sw                                                                                         # [win]

build:
  number: 1
  run_exports:
    - {{ pin_subpackage(name, max_pin='x.x') }}
  ignore_run_exports:
    - dbus     # [unix]
    - wayland  # [linux]
  missing_dso_whitelist:
    - '*/api-ms-win-shcore-scaling-l1-1-1.dll'     # [win]
    - '*/api-ms-win-core-winrt-l1-1-0.dll'         # [win]
    - '*/api-ms-win-core-winrt-string-l1-1-0.dll'  # [win]

requirements:
  build:
    - {{ stdlib('c') }}
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - pkg-config     # [unix]
    - bison          # [linux]
    - flex           # [linux]
    - gperf          # [linux]
    - jom            # [win]
    - msys2-bison    # [win]
    - msys2-flex     # [win]
    - msys2-gperf    # [win]
    - cmake >=3.22
    - ninja
    - perl
  host:
    - fontconfig {{ fontconfig }}   # [linux]
    - libkrb5 {{ krb5 }}            # [linux]
    - libcups 2.4.2                 # [linux]
    - dbus {{ dbus }}               # [unix]
    - freetype {{ freetype }}       # [unix]
    - pcre2 {{ pcre2 }}             # [unix]
    - glib {{ glib }}
    - harfbuzz {{ harfbuzz }}
    - icu {{ icu }}
    - jpeg {{ jpeg }}
    - libpng {{ libpng }}
    - libpq {{ libpq }}
    - mysql-devel {{ mysql_libs }}
    - openssl {{ openssl }}
    - sqlite {{ sqlite }}
    - zlib {{ zlib }}
    - zstd {{ zstd }}
    # Vulkan support
    - libvulkan-headers {{ libvulkan }}              # [not osx]
    - libvulkan-loader {{ libvulkan }}               # [not osx]
    # OpenGL support
    - libdrm {{ libdrm }}                            # [linux]
    - libxkbcommon {{ libxkbcommon }}                # [linux]
    - libxcb {{ libxcb }}                            # [linux]
    - libgl-devel  {{ libgl }}                       # [linux]
    - libegl-devel {{ libglvnd }}                    # [linux]
    - mesalib {{ mesalib }}                          # [linux]
    - xcb-util-cursor {{ xcb_util_cursor }}          # [linux]
    - xcb-util-image {{ xcb_util_image }}            # [linux]
    - xcb-util-keysyms {{ xcb_util_keysyms }}        # [linux]
    - xcb-util-renderutil {{ xcb_util_renderutil }}  # [linux]
    - xcb-util-wm {{ xcb_util_wm }}                  # [linux]
    - xorg-libice {{ xorg_libice }}                  # [linux]
    - xorg-libsm {{ xorg_libsm }}                    # [linux]
    - xorg-libx11 {{ xorg_libx11 }}                  # [linux]
    # Wayland support
    - wayland {{ wayland }}                          # [linux]
  run_constrained:
    - qt-main >={{ version }},<7
    - qt >={{ version }},<7

# An empty dummy variable has to be declared here or else the real list within the `outputs` block will be scoped only
# to that block and not usable below in the `qtbase` package tests.
{% set qt_libs = [] %}

outputs:
# All of the libraries and associated files we expect to find in these packages.
{% set qt_libs = [ "Core",
                   "Concurrent",
                   "DBus",
                   "EglFsKmsGbmSupport",  # [linux]
                   "EglFsKmsSupport",     # [linux]
                   "Gui",
                   "Network",
                   "OpenGL",
                   "OpenGLWidgets",
                   "PrintSupport",
                   "Sql",
                   "Test",
                   "Widgets",
                   "Xml"
] %}

# The internal Qt libraries that still need to be included to ensure things work. These are separated because there are
# CMake configs for these libraries but no publicly facing libQt6XXXX.so files.
{% set private_qt_libs = [ "BuildInternals",
                           "Concurrent",
                           "ConcurrentPrivate",
                           "CorePrivate",
                           "CoreTools",
                           "DBusPrivate",
                           "DBusTools",
                           "DeviceDiscoverySupportPrivate",
                           "EglFSDeviceIntegrationPrivate",  # [unix]
                           "EglFsKmsGbmSupportPrivate",      # [linux]
                           "EglFsKmsSupportPrivate",         # [linux]
                           "EntryPointPrivate",              # [win]
                           "ExamplesAssetDownloaderPrivate",
                           "ExampleIconsPrivate",
                           "FbSupport",
                           "FbSupportPrivate",
                           "GuiPrivate",
                           "GuiTools",
                           "KmsSupportPrivate",              # [linux]
                           "HostInfo",
                           "InputSupportPrivate",            # [unix]
                           "KmsSupportPrivate",              # [unix]
                           "NetworkPrivate",
                           "OpenGLPrivate",
                           "OpenGLWidgetsPrivate",
                           "PrintSupportPrivate",
                           "SqlPrivate",
                           "TestInternalsPrivate",
                           "TestPrivate",
                           "WidgetsPrivate",
                           "WidgetsTools",
                           "XcbQpaPrivate",                  # [unix]
                           "XmlPrivate"
] %}
{% set win_prefix = "" %}          # [not win]
{% set win_suffix = "" %}          # [not win]
{% set win_prefix = "Library/" %}  # [win]
{% set win_suffix = ".exe" %}      # [win]

  - name: {{ name }}
    files:
      - "lib/libQt6*.so.*"                 # [linux]
      - "lib/libQt6*.6.dylib"              # [osx]
      - "lib/libQt6*.{{ version }}.dylib"  # [osx]
      - "Library/bin/Qt6*.dll"             # [win]
      - "Library/lib/qt6/bin/Qt6*.dll"     # [win]
      # qt.conf files are overrides used for plugins so should go wherever the plugins go.
      - qt6.conf                           # [win]
      - {{ win_prefix }}bin/qt6.conf
      - {{ win_prefix }}lib/qt6/plugins
      - {{ win_prefix }}share/doc/qt6
      - {{ win_prefix }}share/qt6/config.summary

  - name: {{ name }}-devel
    build:
      run_exports:
        - {{ pin_subpackage(name, max_pin='x.x') }}
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
      host:
        - {{ pin_subpackage(name, exact=True) }}
        - pcre2 {{ pcre2 }}  # [unix]
        - zstd {{ zstd }}
      run:
        - {{ pin_subpackage(name, exact=True) }}
        - libgl-devel            # [linux]
        - libegl-devel           # [linux]
        - libglx-devel           # [linux]
    files:
      - {{ win_prefix }}bin/androiddeployqt6{{ win_suffix }}
      - {{ win_prefix }}bin/qmake6{{ win_suffix }}
      - Library/bin/qtpaths6.exe                 # [win]
      - Library/bin/windeployqt6.exe             # [win]
      - {{ win_prefix }}include/qt6
      - "lib/libQt6*.prl"                        # [unix]
      - "lib/libQt6*.a"                          # [unix]
      - "Library/lib/Qt6*.prl"                   # [win]
      - "Library/lib/Qt6*.lib"                   # [win
      {% for lib_name in qt_libs %}
      - lib/libQt6{{ lib_name }}{{ SHLIB_EXT }}  # [unix]
      {% endfor %}
      {% for lib_name in qt_libs + private_qt_libs %}
      - {{ win_prefix }}lib/cmake/Qt6{{ lib_name }}
      {% endfor %}
      - {{ win_prefix }}lib/cmake/Qt6
      - "lib/pkgconfig/Qt6*.pc"                  # [unix]
      - {{ win_prefix }}lib/objects-Release/ExampleIconsPrivate_resources_1/.qt
      - lib/qt6/bin                              # [unix]
      - "Library/lib/qt6/bin/*.bat"              # [win]
      - "Library/lib/qt6/bin/*{{ win_suffix }}"  # [win]
      - lib/qt6/qt-cmake-private                 # [unix]
      - {{ win_prefix }}lib/qt6/qt-cmake-private-install.cmake
      - lib/qt6/qt-cmake-standalone-test         # [unix]
      - lib/qt6/qt-internal-configure-examples   # [unix]
      - lib/qt6/qt-internal-configure-tests      # [unix]
      - lib/qt6/qt-android-runner.py             # [unix]
      - {{ win_prefix }}lib/qt6/ensure_pro_file.cmake
      - {{ win_prefix }}lib/qt6/qt-testrunner.py
      - {{ win_prefix }}lib/qt6/sanitizer-testrunner.py
      - {{ win_prefix }}lib/qt6/syncqt{{ win_suffix }}
      - Library/lib/qt6/syncqt.pdb               # [win]
      - {{ win_prefix }}lib/qt6/moc{{ win_suffix }}
      - {{ win_prefix }}lib/qt6/rcc{{ win_suffix }}
      - {{ win_prefix }}lib/qt6/tracepointgen{{ win_suffix }}
      - {{ win_prefix }}lib/qt6/tracegen{{ win_suffix }}
      - {{ win_prefix }}lib/qt6/cmake_automoc_parser{{ win_suffix }}
      - {{ win_prefix }}lib/qt6/uic{{ win_suffix }}
      - {{ win_prefix }}lib/qt6/qlalr{{ win_suffix }}
      - {{ win_prefix }}lib/qt6/qvkgen{{ win_suffix }}
      - {{ win_prefix }}lib/qt6/uic{{ win_suffix }}
      - {{ win_prefix }}lib/qt6/metatypes
      - {{ win_prefix }}lib/qt6/mkspecs
      - {{ win_prefix }}lib/qt6/modules
      - {{ win_prefix }}lib/qt6/sbom
    test:
      requires:
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - dbus {{ dbus }}  # [unix]
        - pkg-config       # [linux]
        # These are needed for linking, not runtime
        - libxkbcommon     # [linux]
      files:
        - run_qt_test.sh    # [unix]
        - run_qt_test.bat   # [win]
        - xvfb-run          # [osx]
        - test/*
      commands:
        {% for lib_name in qt_libs %}
        - test -d $PREFIX/include/qt6/Qt{{ lib_name }}              # [unix]
        - test -f $PREFIX/lib/libQt6{{ lib_name }}${SHLIB_EXT}      # [unix]
        - echo Checking for %LIBRARY_INC%\\qt6\\Qt{{ lib_name }}    # [win]
        - if not exist %LIBRARY_INC%\\qt6\\Qt{{ lib_name }} exit 1  # [win]
        - echo Checking for %LIBRARY_LIB%\\Qt6{{ lib_name }}.lib    # [win]
        - if not exist %LIBRARY_LIB%\\Qt6{{ lib_name }}.lib exit 1  # [win]
        {% endfor %}
        # pkg-config checks for OpenGL modules (CLI-only, no GUI required)
        - export PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig       # [linux]
        - pkg-config --cflags Qt6Core                        # [linux]
        - pkg-config --cflags Qt6OpenGL                      # [linux]
        - pkg-config --cflags Qt6OpenGLWidgets               # [linux]
        - qmake6 --version
        - ./run_qt_test.sh  # [unix]
        - run_qt_test.bat   # [win]

# `test` has to come after `outputs` so that the `qt_libs` list works in both. Weird.
test:
  commands:
    {% for lib_name in qt_libs %}
    - test -f $PREFIX/lib/libQt6{{ lib_name }}.so.{{ version }}           # [linux]
    - test -f $PREFIX/lib/libQt6{{ lib_name }}.so.6                       # [linux]
    - test -f $PREFIX/lib/libQt6{{ lib_name }}.{{ version }}.dylib        # [osx]
    - test -f $PREFIX/lib/libQt6{{ lib_name }}.6.dylib                    # [osx]
    - echo Checking for %LIBRARY_LIB%\\qt6\\bin\\Qt6{{ lib_name }}.dll    # [win]
    - if not exist %LIBRARY_LIB%\\qt6\\bin\\Qt6{{ lib_name }}.dll exit 1  # [win]
    - echo Checking for %LIBRARY_BIN%\\Qt6{{ lib_name }}.dll              # [win]
    - if not exist %LIBRARY_BIN%\\Qt6{{ lib_name }}.dll exit 1            # [win]
    {% endfor %}
    - test -f $PREFIX/lib/qt6/plugins/platforms/libqxcb.so                 # [linux]
    - test -f $PREFIX/lib/qt6/plugins/platforms/libqeglfs.so               # [linux]
    - test -f $PREFIX/lib/qt6/plugins/sqldrivers/libqsqlite${SHLIB_EXT}    # [unix]
    - test -f $PREFIX/lib/qt6/plugins/sqldrivers/libqsqlmysql${SHLIB_EXT}  # [unix]
    - test -f $PREFIX/lib/qt6/plugins/sqldrivers/libqsqlpsql${SHLIB_EXT}   # [unix]
    - test -f $PREFIX/lib/qt6/plugins/imageformats/libqjpeg${SHLIB_EXT}    # [unix]

about:
  home: https://www.qt.io/
  license: LGPL-3.0-only
  license_file: {{ name }}/LICENSES/LGPL-3.0-only.txt
  license_family: LGPL
  summary: Cross-platform application and UI framework ({{ name[2:] }} libraries).
  description: |
    Qt helps you create connected devices, UIs & applications that run
    anywhere on any device, on any operating system at any time ({{ name[2:] }} libraries).
  doc_url: https://doc.qt.io/
  dev_url: https://github.com/qt/{{ name }}

extra:
  skip-lints:
    - outputs_not_unique  # output "qtbase": Output name is not unique.
    - missing_tests  # output "qtbase": No tests were found.
    - missing_section  # output "qtbase": The requirements section is missing.
    - no_global_test  # Global tests are ignored in multi-output recipes. <- No longer true.
